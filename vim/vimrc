"VUNDLE SETUP
"-------------------------------------------------------------------------------
set rtp+=$HOME/.vim/bundle/Vundle.vim "Set Runtime Directory

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'wakatime/vim-wakatime'
Plugin 'airblade/vim-gitgutter'
Plugin 'tomtom/tlib_vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'othree/html5.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'godlygeek/tabular'
Plugin 'vim-scripts/Align'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'maksimr/vim-jsbeautify'
Plugin 'mattn/emmet-vim'
Plugin 'vim-scripts/OmniCppComplete'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'itchyny/lightline.vim'
call vundle#end()

"COMPATIBILITY & ENCODING
"-------------------------------------------------------------------------------
set nocompatible       "Use Vim features, not Vi
set encoding=utf-8     "Set UTF-8 Encoding
set termencoding=utf-8 "Set UTF-8 Encoding

"SYNTAX HIGHLIGHTING
"-------------------------------------------------------------------------------
syntax enable           "Switches on syntax highlighting
filetype plugin on      "Detect filetype
colorscheme dracula     "Using Dracula for better syntax highlight
set background=dark     "Dracula can't stand the light
set term=xterm-256color "256 colours
set t_Co=256            "256 colours
set showmatch           "Show matching parens, brackets, etc.
set shiftround          "Round indent to nearest multiple of 2
set guifont=Inconsolata\ for\ Powerline:h20

"TEXT
"-------------------------------------------------------------------------------
filetype plugin indent on "When a file is edited its indent file is loaded
let html_no_rendering=1   "Remove underline from HTML files
set expandtab             "Make the tab key insert spaces instead of tabs
set tabstop=2             "Set the width of an actual tab
set shiftwidth=2          "Size of an indent
set softtabstop=2         "Make the tab key to simulate tab stops at this width
set showtabline=2         "Show tabline
set nowrap                "No line-wrapping

"DECORATIONS
"-------------------------------------------------------------------------------
set number          "Display line numbers
set numberwidth=5   "Change the width of the gutter column used for numbering
set ruler           "Show current line and column position in file
set textwidth=80    "New line after 80 characters
set colorcolumn=+1  "Colour the 81st column
set cursorline      "Highlight the current line in every window
set title           "Show file title in terminal tab
set shortmess=atI   "File messages and options
set showcmd         "Incomplete Commands
set laststatus=2    "Make the status line visible in with only one window
set modeline        "Allow modelines
set guioptions-=r   "Hide right scrollbar from GUI
set guioptions-=e   "Make Vim GUI tab menu to look like Console tab menu

"BUFFER
"-------------------------------------------------------------------------------
set wildmenu          "Show file options above the command line
set splitbelow        "Open splits to below
set splitright        "Open splits to the right
set fillchars=vert:\  "Change vertical split characters
set wildignore=.swp,.swo,.netrwhist,.svn,.git,.gitkeep,.DS_Store,.sass-cache,node_modules,bower_components
let g:netrw_list_hide='.swp,.swo,.netrwhist,.svn,.git,.gitkeep,.DS_Store,.sass-cache,node_modules,bower_components'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|svn|node_modules|bower_components)$'

"INTERACTIONS
"-------------------------------------------------------------------------------
set scrolloff=3     "Start scrolling before the cursor reaches an edge
set sidescrolloff=5 "Start scrolling before the cursor reaches an edge
set sidescroll=1    "Scroll sideways a character at a time
set backspace=indent,eol,start "Allow motions and back-spacing over line-endings
set whichwrap=h,l,b,<,>,~,[,]  "Allow motions and back-spacing over line-endings
autocmd VimResized * exe "normal! \<c-w>=" "Resize splits

"KEY MAPPINGS
"-------------------------------------------------------------------------------
inoremap jj <esc>     "jj to throw you into normal mode from insert mode
noremap jk <esc>      "jK to throw you into normal mode from insert mode
map  <Leader>_b <c-/> "Toggle comments
imap <Leader>_b <c-/> "Toggle comments

"Front-end Beautify
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

"PLUGINS SETTINGS
"-------------------------------------------------------------------------------
"CSS Autocomplete
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"Emmet
let g:user_emmet_install_global = 0       "Turn Emmet off globally
autocmd FileType html,css EmmetInstall    "Emmet just for HTML & CSS
let g:user_emmet_expandabbr_key = '<tab>' "Change Emmet trigger to Tab

"Powerline
let g:lightline = {
      \ 'colorscheme': 'Dracula',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename'
      \ }
      \ }

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '✗' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
endfunction

function! MyFugitive()
  if exists("*fugitive#head")
    let _ = fugitive#head()
    return strlen(_) ? ' '._ : ''
  endif
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
       \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
       \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction
